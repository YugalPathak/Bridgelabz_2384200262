using System;
using System.Text.RegularExpressions;
using NUnit.Framework;

public class UserRegistration
{
    // Registers a user if inputs are valid, otherwise throws ArgumentException
    public bool RegisterUser(string username, string email, string password)
    {
        if (string.IsNullOrWhiteSpace(username) || username.Length < 3)
            throw new ArgumentException("Username must be at least 3 characters long.");

        if (string.IsNullOrWhiteSpace(email) || !Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
            throw new ArgumentException("Invalid email format.");

        if (string.IsNullOrWhiteSpace(password) || password.Length < 8)
            throw new ArgumentException("Password must be at least 8 characters long.");

        return true; // Registration successful
    }
}

[TestFixture]
public class UserRegistrationTests
{
    private UserRegistration _registration;

    [SetUp] // Runs before each test
    public void Setup()
    {
        _registration = new UserRegistration();
    }

    [Test] // Test valid user registration
    public void RegisterUser_Should_Return_True_For_Valid_Input()
    {
        Assert.IsTrue(_registration.RegisterUser("JohnDoe", "john@example.com", "StrongPass1"));
        Assert.IsTrue(_registration.RegisterUser("Alice", "alice123@gmail.com", "Secure#Pass9"));
    }

    [Test] // Test invalid username cases
    public void RegisterUser_Should_ThrowException_For_Invalid_Username()
    {
        Assert.Throws<ArgumentException>(() => _registration.RegisterUser("", "user@example.com", "ValidPass1"));
        Assert.Throws<ArgumentException>(() => _registration.RegisterUser("JD", "user@example.com", "ValidPass1"));
    }

    [Test] // Test invalid email cases
    public void RegisterUser_Should_ThrowException_For_Invalid_Email()
    {
        Assert.Throws<ArgumentException>(() => _registration.RegisterUser("ValidUser", "", "ValidPass1"));
        Assert.Throws<ArgumentException>(() => _registration.RegisterUser("ValidUser", "invalidemail.com", "ValidPass1"));
        Assert.Throws<ArgumentException>(() => _registration.RegisterUser("ValidUser", "user@.com", "ValidPass1"));
    }

    [Test] // Test invalid password cases
    public void RegisterUser_Should_ThrowException_For_Invalid_Password()
    {
        Assert.Throws<ArgumentException>(() => _registration.RegisterUser("ValidUser", "user@example.com", ""));
        Assert.Throws<ArgumentException>(() => _registration.RegisterUser("ValidUser", "user@example.com", "short"));
    }
}