using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FileHandling
{
    internal class Program1
    {
        static void Main(string[] args)
        {
            string sourceFile = "C:\\Users\\khant\\OneDrive\\Desktop\\input.txt";
            string destinationFile1 = "C:\\Users\\khant\\OneDrive\\Desktop\\output.txt";
            string destinationFile2 = "C:\\Users\\khant\\OneDrive\\Desktop\\output-buffered.txt";

            try
            {
                // Check if the source file exists
                if (!File.Exists(sourceFile))
                {
                    Console.WriteLine("Error: Source file does not exist.");
                    return;
                }

                // Measure time for unbuffered copy
                Stopwatch stopwatch = Stopwatch.StartNew();
                Program1 program = new Program1();
                program.CopyFileWithoutBuffering(sourceFile, destinationFile1);
                stopwatch.Stop();
                Console.WriteLine($" Unbuffered Copy Time: {stopwatch.ElapsedMilliseconds} ms");

                // Measure time for buffered copy
                stopwatch.Restart();
                program.CopyFileWithBuffering(sourceFile, destinationFile2);
                stopwatch.Stop();
                Console.WriteLine($" Buffered Copy Time: {stopwatch.ElapsedMilliseconds} ms");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }

        //  Unbuffered File Copy (Reads/Writes Byte by Byte)
        public void CopyFileWithoutBuffering(string source, string destination)
            {
                using (FileStream readFile = new FileStream(source, FileMode.Open, FileAccess.Read))
                using (FileStream writeFile = new FileStream(destination, FileMode.Create, FileAccess.Write))
                {
                    int data;
                    while ((data = readFile.ReadByte()) != -1)  // Reads byte-by-byte (slow)
                    {
                        writeFile.WriteByte((byte)data);
                    }
                }
            }

            //  Buffered File Copy (Uses 4KB Buffer)
            public void CopyFileWithBuffering(string source, string destination)
            {
                using (FileStream readFile = new FileStream(source, FileMode.Open, FileAccess.Read))
                using (BufferedStream bufferedRead = new BufferedStream(readFile, 4096))  // Buffered Stream with 4KB
                using (FileStream writeFile = new FileStream(destination, FileMode.Create, FileAccess.Write))
                using (BufferedStream bufferedWrite = new BufferedStream(writeFile, 4096))
                {
                    byte[] buffer = new byte[4096];
                    int bytesRead;

                    while ((bytesRead = bufferedRead.Read(buffer, 0, buffer.Length)) > 0)  // Read in chunks (fast)
                    {
                        bufferedWrite.Write(buffer, 0, bytesRead);
                    }
                }
            }
    }
}