using System;
using System.IO;
using NUnit.Framework;

public class FileProcessor
{
    // Writes content to a file
    public void WriteToFile(string filename, string content)
    {
        File.WriteAllText(filename, content);
    }

    // Reads content from a file
    public string ReadFromFile(string filename)
    {
        if (!File.Exists(filename))
            throw new IOException("File not found.");
        
        return File.ReadAllText(filename);
    }
}

[TestFixture]
public class FileProcessorTests
{
    private FileProcessor _fileProcessor;
    private string _testFilePath;

    [SetUp] // Runs before each test
    public void Setup()
    {
        _fileProcessor = new FileProcessor();
        _testFilePath = "testfile.txt";
    }

    [TearDown] // Runs after each test
    public void Teardown()
    {
        if (File.Exists(_testFilePath))
            File.Delete(_testFilePath);
    }

    [Test] // Test writing and reading file content
    public void WriteToFile_And_ReadFromFile_Should_Return_Correct_Content()
    {
        string content = "Hello, NUnit!";
        
        _fileProcessor.WriteToFile(_testFilePath, content);
        string readContent = _fileProcessor.ReadFromFile(_testFilePath);
        
        Assert.AreEqual(content, readContent);
    }

    [Test] // Test if file exists after writing
    public void WriteToFile_Should_Create_File()
    {
        _fileProcessor.WriteToFile(_testFilePath, "Test Content");

        Assert.IsTrue(File.Exists(_testFilePath));
    }

    [Test] // Test IOException when reading a non-existent file
    public void ReadFromFile_Should_ThrowIOException_If_File_Not_Exists()
    {
        Assert.Throws<IOException>(() => _fileProcessor.ReadFromFile("nonexistent.txt"));
    }
}