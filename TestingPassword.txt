using System;
using System.Text.RegularExpressions;
using NUnit.Framework;

public class PasswordValidator
{
    // Validates password based on given criteria
    public bool IsValid(string password)
    {
        if (string.IsNullOrEmpty(password) || password.Length < 8)
            return false;
        
        if (!Regex.IsMatch(password, @"[A-Z]")) // At least one uppercase letter
            return false;

        if (!Regex.IsMatch(password, @"\d")) // At least one digit
            return false;

        return true;
    }
}

[TestFixture]
public class PasswordValidatorTests
{
    private PasswordValidator _validator;

    [SetUp] // Runs before each test
    public void Setup()
    {
        _validator = new PasswordValidator();
    }

    [Test] // Test valid passwords
    public void IsValid_Should_Return_True_For_Valid_Passwords()
    {
        Assert.IsTrue(_validator.IsValid("StrongP@ss1"));
        Assert.IsTrue(_validator.IsValid("HelloWorld9"));
        Assert.IsTrue(_validator.IsValid("ValidPass8"));
    }

    [Test] // Test password less than 8 characters
    public void IsValid_Should_Return_False_For_Short_Passwords()
    {
        Assert.IsFalse(_validator.IsValid("Short1"));
    }

    [Test] // Test password without uppercase letter
    public void IsValid_Should_Return_False_If_No_Uppercase()
    {
        Assert.IsFalse(_validator.IsValid("weakpassword1"));
    }

    [Test] // Test password without digit
    public void IsValid_Should_Return_False_If_No_Digit()
    {
        Assert.IsFalse(_validator.IsValid("NoNumberHere"));
    }

    [Test] // Test empty password
    public void IsValid_Should_Return_False_For_Empty_Or_Null()
    {
        Assert.IsFalse(_validator.IsValid(""));
        Assert.IsFalse(_validator.IsValid(null));
    }
}